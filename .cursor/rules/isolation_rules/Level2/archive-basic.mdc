---
description: Basic archiving approach for Level 2 Simple Enhancement tasks
globs: archive-basic.mdc
alwaysApply: false
---
# 级别2任务的基本归档

> **简要说明：** 本文档概述了级别2（简单增强）任务的基本归档方法，确保已完成的工作得到适当记录，知识得到保存，开销最小。

## 🔍 归档概述

即使对于级别2任务，适当的归档也能确保已完成的工作得到记录，知识得到保存。这种基本归档方法在保持效率的同时提供足够的结构。

## 📋 归档原则

1. **完整性**: 清楚记录已完成的内容
2. **上下文**: 保存增强的上下文
3. **知识**: 捕获关键见解和经验教训
4. **可查找性**: 使归档信息易于查找
5. **引用**: 创建与相关工作的交叉引用

## 📋 基本归档结构

```markdown
# 增强归档: [功能名称]

## 摘要
[增强的简要摘要]

## 完成日期
YYYY-MM-DD

## 修改的关键文件
- [文件路径 1]
- [文件路径 2]
- [文件路径 3]

## 满足的需求
- [需求 1]
- [需求 2]
- [需求 3]

## 实现细节
[增强如何实现的简要描述]

## 执行的测试
- [测试 1]
- [测试 2]
- [测试 3]

## 经验教训
- [教训 1]
- [教训 2]
- [教训 3]

## 相关工作
- [相关任务/增强 1的链接]
- [相关任务/增强 2的链接]

## 说明
[任何额外信息或上下文]
```

## 📋 归档位置

在有组织的结构中存储归档：

```
docs/
└── archive/
    └── enhancements/
        └── YYYY-MM/
            ├── feature-name-1.md
            └── feature-name-2.md
```

## 📋 归档流程

按照这些步骤归档级别2任务：

1. **准备归档内容**:
   - 收集所有相关信息
   - 填写归档模板
   - 包含所有关键实现细节

2. **创建交叉引用**:
   - 用归档链接更新tasks.md
   - 在progress.md中添加引用
   - 用下一个焦点更新activeContext.md

3. **文件创建和存储**:
   - 如需要创建适当目录
   - 用描述性名称保存归档文件
   - 确保文件遵循命名约定

4. **最终验证**:
   - 检查归档的完整性
   - 验证所有交叉引用
   - 确保所有链接正常工作

## 📋 交叉引用格式

创建交叉引用时：

1. **在tasks.md中**:
   ```markdown
   ## 已完成的增强
   - [X] [功能名称] (YYYY-MM-DD) - [归档链接](../docs/archive/enhancements/YYYY-MM/feature-name.md)
   ```

2. **在progress.md中**:
   ```markdown
   ## 已完成的里程碑
   - [功能名称]增强在YYYY-MM-DD完成。查看[归档条目](../docs/archive/enhancements/YYYY-MM/feature-name.md)。
   ```

3. **在activeContext.md中**:
   ```markdown
   ## 最近完成
   - [功能名称]增强现已完成。归档：[链接](../docs/archive/enhancements/YYYY-MM/feature-name.md)
   
   ## 当前焦点
   - 转向[下一个任务名称]
   ```

## 📋 归档验证检查清单

```
✓ 归档验证
- 归档内容完整? [是/否]
- 归档正确存储? [是/否]
- 交叉引用已创建? [是/否]
- tasks.md已更新? [是/否]
- progress.md已更新? [是/否]
- activeContext.md已更新? [是/否]

→ 如果全部是: 归档完成
→ 如果有否: 完成归档流程
```

## 📋 最小模式归档

对于最小模式，使用此格式：

```
✓ 归档: [功能名称]
✓ 日期: YYYY-MM-DD
✓ 文件: [更改的关键文件]
✓ 摘要: [一句话摘要]
✓ 教训: [关键收获]
✓ 引用: [tasks.md, progress.md, activeContext.md]
```

## 🔄 与Memory Bank的集成

归档与Memory Bank集成：

```mermaid
graph TD
    Archive["增强<br>归档"] --> TasksUpdate["更新<br>tasks.md"]
    Archive --> ProgressUpdate["更新<br>progress.md"]
    Archive --> ContextUpdate["更新<br>activeContext.md"]
    
    TasksUpdate & ProgressUpdate & ContextUpdate --> CrossLinks["创建<br>交叉链接"]
    CrossLinks --> Verify["验证<br>引用"]
```

## 🚨 知识保存原则

记住：

```
┌─────────────────────────────────────────────────────┐
│ 归档文件是宝贵的知识资源。                           │
│ 注意保存对未来工作有益的见解和经验教训。             │
└─────────────────────────────────────────────────────┘
```

这确保知识得到保存，可以在将来参考。 