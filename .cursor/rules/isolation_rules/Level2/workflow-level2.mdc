---
description: Basic workflow for Level 2 Simple Enhancement tasks
globs: "**/level2/**", "**/workflow/**"
alwaysApply: false
---
# 级别2任务的工作流程

> **简要说明：** 本文档概述了级别2（简单增强）任务的结构化但高效的工作流程，包括6个关键阶段，具有里程碑检查点和质量验证。

## 🔍 级别2工作流程概述

```mermaid
graph LR
    Init["1. 初始化"] --> Doc["2. 文档<br>设置"]
    Doc --> Plan["3. 任务<br>规划"]
    Plan --> Impl["4. 实现"]
    Impl --> Reflect["5. 反思"]
    Reflect --> Archive["6. 归档"]
    
    %% 记录每个阶段的连接
    Init -.-> InitDocs["初始化"]
    Doc -.-> DocDocs["文档"]
    Plan -.-> PlanDocs["规划"]
    Impl -.-> ImplDocs["实现"]
    Reflect -.-> ReflectDocs["反思"]
    Archive -.-> ArchiveDocs["归档"]
```

级别2任务涉及需要结构化方法和适度规划和文档的简单增强。此工作流程提供了流程和效率的正确平衡。

## 📋 工作流程阶段

### 阶段1: 初始化

```mermaid
graph TD
    Start["开始级别2任务"] --> Platform{"检测<br>平台"}
    Platform --> FileCheck["关键文件<br>验证"]
    FileCheck --> LoadStructure["加载Memory<br>Bank结构"]
    LoadStructure --> TaskCreation["在tasks.md中<br>创建任务"]
    TaskCreation --> SetupComplete["初始化<br>完成"]
```

**步骤:**
1. 平台检测
2. 关键文件验证
3. Memory Bank结构加载
4. 在tasks.md中创建任务
5. 初始任务范围定义

**里程碑检查点:**
```
✓ 初始化检查点
- 平台检测并配置? [是/否]
- 关键文件已验证? [是/否]
- Memory Bank已加载? [是/否]
- 任务在tasks.md中已创建? [是/否]
- 初始范围已定义? [是/否]

→ 如果全部是: 进入文档设置
→ 如果有否: 完成初始化步骤
```

### 阶段2: 文档设置

```mermaid
graph TD
    Start["开始文档<br>设置"] --> LoadTemplate["加载基本<br>文档模板"]
    LoadTemplate --> UpdateProject["更新<br>projectbrief.md"]
    UpdateProject --> UpdateContext["更新<br>activeContext.md"]
    UpdateContext --> SetupComplete["文档<br>设置完成"]
```

**步骤:**
1. 加载基本文档模板
2. 用增强详情更新projectbrief.md
3. 用当前焦点更新activeContext.md
4. 创建最小文档结构

**里程碑检查点:**
```
✓ 文档检查点
- 文档模板已加载? [是/否]
- projectbrief.md已更新? [是/否]
- activeContext.md已更新? [是/否]
- 文档结构已创建? [是/否]

→ 如果全部是: 进入任务规划
→ 如果有否: 完成文档设置
```

### 阶段3: 任务规划

```mermaid
graph TD
    Start["开始任务<br>规划"] --> Requirements["定义清晰<br>需求"]
    Requirements --> SubTasks["分解为<br>子任务"]
    SubTasks --> TasksUpdate["用子任务更新<br>tasks.md"]
    TasksUpdate --> TimeEstimate["创建时间<br>估算"]
    TimeEstimate --> PlanComplete["规划<br>完成"]
```

**步骤:**
1. 定义清晰需求
2. 分解为子任务
3. 用子任务更新tasks.md
4. 创建时间估算
5. 记录依赖关系和约束

**里程碑检查点:**
```
✓ 规划检查点
- 需求明确定义? [是/否]
- 任务分解为子任务? [是/否]
- tasks.md用子任务更新? [是/否]
- 时间估算已创建? [是/否]
- 依赖关系已记录? [是/否]

→ 如果全部是: 进入实现
→ 如果有否: 完成规划步骤
```

### 阶段4: 实现

```mermaid
graph TD
    Start["开始<br>实现"] --> SubTask1["完成<br>子任务1"]
    SubTask1 --> UpdateStatus1["在tasks.md中<br>更新状态"]
    UpdateStatus1 --> SubTask2["完成<br>子任务2"]
    SubTask2 --> UpdateStatus2["在tasks.md中<br>更新状态"]
    UpdateStatus2 --> FinalSubTask["完成<br>最终子任务"]
    FinalSubTask --> Verification["执行<br>验证"]
    Verification --> ImplComplete["实现<br>完成"]
```

**步骤:**
1. 实现第一个子任务
2. 在tasks.md中更新状态
3. 实现剩余子任务
4. 每个子任务后定期状态更新
5. 验证完整实现

**里程碑检查点:**
```
✓ 实现检查点
- 所有子任务已完成? [是/否]
- 状态更新已维护? [是/否]
- 增强完全实现? [是/否]
- 基本验证已执行? [是/否]
- tasks.md完全更新? [是/否]

→ 如果全部是: 进入反思
→ 如果有否: 完成实现步骤
```

### 阶段5: 反思

```mermaid
graph TD
    Start["开始<br>反思"] --> Template["加载反思<br>模板"]
    Template --> Review["回顾已完成<br>增强"]
    Review --> Document["记录成功<br>和挑战"]
    Document --> Insights["提取关键<br>见解"]
    Insights --> Actions["定义行动<br>项目"]
    Actions --> ReflectComplete["反思<br>完成"]
```

**步骤:**
1. 加载反思模板
2. 回顾已完成的增强
3. 记录成功和挑战
4. 提取关键见解
5. 为未来工作定义行动项目

**里程碑检查点:**
```
✓ 反思检查点
- 反思模板已加载? [是/否]
- 增强已回顾? [是/否]
- 成功和挑战已记录? [是/否]
- 关键见解已提取? [是/否]
- 行动项目已定义? [是/否]

→ 如果全部是: 进入归档
→ 如果有否: 完成反思步骤
```

### 阶段6: 归档

```mermaid
graph TD
    Start["开始<br>归档"] --> Template["加载归档<br>模板"]
    Template --> Gather["收集实现<br>详情"]
    Gather --> Create["创建归档<br>文档"]
    Create --> CrossRef["创建交叉<br>引用"]
    CrossRef --> Update["更新Memory<br>Bank文件"]
    Update --> ArchiveComplete["归档<br>完成"]
```

**步骤:**
1. 加载归档模板
2. 收集实现详情
3. 创建归档文档
4. 创建交叉引用
5. 更新Memory Bank文件

**里程碑检查点:**
```
✓ 归档检查点
- 归档模板已加载? [是/否]
- 实现详情已收集? [是/否]
- 归档文档已创建? [是/否]
- 交叉引用已创建? [是/否]
- Memory Bank文件已更新? [是/否]

→ 如果全部是: 任务完成
→ 如果有否: 完成归档步骤
```

## 📋 工作流程验证检查清单

```
✓ 最终工作流程验证
- 所有阶段已完成? [是/否]
- 所有里程碑检查点已通过? [是/否]
- tasks.md完全更新? [是/否]
- 反思文档已创建? [是/否]
- 归档文档已创建? [是/否]
- Memory Bank完全更新? [是/否]

→ 如果全部是: 级别2任务成功完成
→ 如果有否: 处理未完成项目
```

## 📋 最小模式工作流程

对于最小模式，使用此精简工作流程：

```
1. 初始化: 验证环境，创建任务条目
2. 文档: 更新projectbrief和activeContext
3. 规划: 定义需求、子任务、估算
4. 实现: 完成子任务，更新状态
5. 反思: 记录关键见解和行动
6. 归档: 记录完成和交叉引用
```

## 🔄 级别转换处理

```mermaid
graph TD
    L2["级别2任务"] --> Assess["持续<br>评估"]
    
    Assess --> Down["降级到<br>级别1"]
    Assess --> Up["升级到<br>级别3/4"]
    
    Down --> L1Trigger["触发器:<br>- 比预期简单<br>- 可快速修复<br>- 单个组件"]
    
    Up --> L34Trigger["触发器:<br>- 更复杂<br>- 多个组件<br>- 需要设计"]
    
    L1Trigger --> L1Switch["切换到<br>级别1工作流程"]
    L34Trigger --> L34Switch["切换到<br>级别3/4工作流程"]
```

## 🔄 与Memory Bank的集成

```mermaid
graph TD
    Workflow["级别2<br>工作流程"] --> PB["更新<br>projectbrief.md"]
    Workflow --> AC["更新<br>activeContext.md"]
    Workflow --> TM["维护<br>tasks.md"]
    Workflow --> PM["更新<br>progress.md"]
    
    PB & AC & TM & PM --> MB["Memory Bank<br>集成"]
    MB --> NextTask["转换到<br>下一个任务"]
```

## 🚨 效率原则

记住：

```
┌─────────────────────────────────────────────────────┐
│ 级别2工作流程平衡流程与效率。                       │
│ 遵循结构但避免不必要的开销。                       │
└─────────────────────────────────────────────────────┘
```

这确保简单增强以适当的文档和流程级别实现。 