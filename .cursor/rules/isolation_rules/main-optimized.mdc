---
description: Optimized main rule for improved token efficiency
globs: main-optimized.mdc
alwaysApply: false
---
# 🔍 优化记忆库系统

🚨 关键规则：记忆库创建是强制性的 🚨
记忆库必须在任何模式下的任何其他操作之前创建
没有验证记忆库存在，任何流程都不能继续

> **简要说明：** 此系统使用优化的上下文管理和自适应规则加载来最大化令牌效率，同时保持结构化开发方法。

## 🧭 优化模式架构

```mermaid
graph TD
    subgraph "记忆库核心"
        Context["上下文管理器"]
        Rules["规则加载器"]
        FileIO["文件管理器"]
        Transition["模式转换"]
    end
    
    subgraph "自定义模式"
        VAN["VAN<br>初始化"]
        PLAN["PLAN<br>规划"]
        CREATIVE["CREATIVE<br>设计"]
        IMPLEMENT["IMPLEMENT<br>构建"]
        REFLECT["REFLECT<br>审查"]
        ARCHIVE["ARCHIVE<br>文档"]
    end
    
    Context --> VAN & PLAN & CREATIVE & IMPLEMENT & REFLECT & ARCHIVE
    Rules --> VAN & PLAN & CREATIVE & IMPLEMENT & REFLECT & ARCHIVE
    FileIO --> VAN & PLAN & CREATIVE & IMPLEMENT & REFLECT & ARCHIVE
    Transition --> VAN & PLAN & CREATIVE & IMPLEMENT & REFLECT & ARCHIVE
    
    VAN --> PLAN
    PLAN --> CREATIVE
    CREATIVE --> IMPLEMENT
    IMPLEMENT --> REFLECT
    REFLECT --> ARCHIVE
    
    style Context fill:#4da6ff,stroke:#0066cc,color:white
    style Rules fill:#ffa64d,stroke:#cc7a30,color:white
    style FileIO fill:#4dbb5f,stroke:#36873f,color:white
    style Transition fill:#d94dbb,stroke:#a3378a,color:white
```

## 📈 自适应复杂度模型

```mermaid
graph TD
    Task["任务创建"] --> Complexity{"复杂度<br>级别？"}
    
    Complexity -->|"一级<br>快速修复"| L1["3阶段<br>简化流程"]
    Complexity -->|"二级<br>增强"| L2["4阶段<br>平衡流程"]
    Complexity -->|"三级<br>功能"| L3["5阶段<br>综合流程"]
    Complexity -->|"四级<br>企业级"| L4["6阶段<br>治理流程"]
    
    L1 --> L1_Process["VAN → IMPLEMENT → REFLECT"]
    L2 --> L2_Process["VAN → PLAN → IMPLEMENT → REFLECT"]
    L3 --> L3_Process["VAN → PLAN → CREATIVE → IMPLEMENT → REFLECT"]
    L4 --> L4_Process["VAN → PLAN → CREATIVE → IMPLEMENT → REFLECT → ARCHIVE"]
    
    style Complexity fill:#d94dbb,stroke:#a3378a,color:white
    style L1 fill:#4dbb5f,stroke:#36873f,color:white
    style L2 fill:#ffa64d,stroke:#cc7a30,color:white
    style L3 fill:#4da6ff,stroke:#0066cc,color:white
    style L4 fill:#ff5555,stroke:#cc0000,color:white
```

## 🧠 分层规则加载

规则分层加载以优化上下文使用：

```mermaid
graph TD
    Root["记忆库<br>通用规则"] --> Core["核心规则<br>跨模式共享"]
    
    Core --> L1["一级<br>规则"]
    Core --> L2["二级<br>规则"]
    Core --> L3["三级<br>规则"]
    Core --> L4["四级<br>规则"]
    
    Core --> VM["模式<br>可视化地图"]
    
    Core --> Phase["阶段特定<br>规则"]
    
    Phase --> VAN_Rules["VAN模式<br>规则"]
    Phase --> PLAN_Rules["PLAN模式<br>规则"]
    Phase --> CREATIVE_Rules["CREATIVE模式<br>规则"]
    Phase --> IMPLEMENT_Rules["IMPLEMENT模式<br>规则"]
    Phase --> REFLECT_Rules["REFLECT模式<br>规则"]
    Phase --> ARCHIVE_Rules["ARCHIVE模式<br>规则"]
    
    style Root fill:#4da6ff,stroke:#0066cc,color:white
    style Core fill:#ffa64d,stroke:#cc7a30,color:white
    style Phase fill:#4dbb5f,stroke:#36873f,color:white
```

## 🔄 令牌优化创意阶段

创意阶段文档逐步生成：

```mermaid
graph TD
    Start["创意阶段<br>启动"] --> P1["1️⃣ 问题<br>定义范围"]
    P1 --> P2["2️⃣ 选项<br>列出替代方案"]
    P2 --> P3["3️⃣ 分析<br>比较选项"]
    P3 --> P4["4️⃣ 决策<br>选择方法"]
    P4 --> P5["5️⃣ 指南<br>文档实施"]
    
    P3 -.->|"按需"| Details["详细选项<br>分析"]
    
    style Start fill:#d971ff,stroke:#a33bc2,color:white
    style P1 fill:#4da6ff,stroke:#0066cc,color:white
    style P2 fill:#ffa64d,stroke:#cc7a30,color:white
    style P3 fill:#4dbb5f,stroke:#36873f,color:white
    style P4 fill:#d94dbb,stroke:#a3378a,color:white
    style P5 fill:#4dbbbb,stroke:#368787,color:white
    style Details fill:#e699d9,stroke:#d94dbb,color:white,stroke-dasharray: 5 5
```

## 🔀 优化模式转换

模式转换使用统一的上下文传输协议：

```mermaid
sequenceDiagram
    participant Current as 当前模式
    participant Context as 上下文管理器
    participant Next as 下一模式
    
    Current->>Context: 创建转换文档
    Current->>Context: 存储关键上下文
    Context->>Context: 准备规则缓存
    Current->>Next: 启动转换
    Next->>Context: 验证上下文可用性
    Context->>Next: 加载相关上下文
    Context->>Next: 加载缓存规则
    Next->>Next: 继续保留上下文
```

## 📊 记忆库高效更新

```mermaid
graph TD
    subgraph "记忆库文件"
        tasks["tasks.md<br>真实来源"]
        active["activeContext.md<br>当前焦点"]
        creative["creative-*.md<br>设计决策"]
        progress["progress.md<br>实施状态"]
        transition["transition.md<br>模式转换"]
    end
    
    Update["更新请求"] --> Diff{"已更改？"}
    Diff -->|"否"| Skip["跳过更新"]
    Diff -->|"是"| Section{"部分<br>更改？"}
    Section -->|"是"| Partial["仅更新已更改<br>的部分"]
    Section -->|"否"| Full["完整文件<br>更新"]
    
    Partial --> tasks
    Full --> tasks
    
    style Update fill:#4da6ff,stroke:#0066cc,color:white
    style Diff fill:#ffa64d,stroke:#cc7a30,color:white
    style Section fill:#4dbb5f,stroke:#36873f,color:white
    style Partial fill:#d94dbb,stroke:#a3378a,color:white
    style Full fill:#4dbbbb,stroke:#368787,color:white
```

## 💻 基于复杂度的文档

文档需求根据复杂度级别扩展：

| 文档 | 一级 | 二级 | 三级 | 四级 |
|------|------|------|------|------|
| 问题定义 | 简要 | 标准 | 详细 | 综合 |
| 选项分析 | 可选 | 基本 | 多选项 | 广泛 |
| 实施计划 | 简单 | 标准 | 详细 | 分阶段 |
| 测试需求 | 基本 | 标准 | 综合 | 严格 |
| 文档记录 | 最少 | 标准 | 详细 | 广泛 |

## 📑 按级别优化的模板

### 一级：快速修复模板
```markdown
## 快速修复：[问题名称]
- 问题：[简要描述]
- 解决方案：[实施方法]
- 验证：[如何测试修复]
```

### 二级：增强模板
```markdown
## 增强：[功能名称]
- 需求：[需要完成的工作]
- 方法：[如何实施]
- 测试：[验证方法]
- 文档：[文档位置]
```

### 三级-四级：综合模板
使用优化的创意阶段模板，具有适当的文档深度

## 🔄 参考地图

每个模式的可视化流程图都针对令牌效率进行了优化：

- @VAN模式地图（优化版）
- @PLAN模式地图（优化版）
- @CREATIVE模式地图（优化版）
- @IMPLEMENT模式地图（优化版）
- @REFLECT模式地图（优化版）
- @ARCHIVE模式地图（优化版）

## ⚡ 令牌效率改进

此版本的优化：

1. 分层规则加载（减少65%令牌）
2. 渐进式创意阶段文档（减少60%令牌）
3. 模式转换期间的上下文保持（减少40%令牌）
4. 差异化记忆库更新（减少30%令牌）
5. 基于复杂度的模板扩展（因级别而异）

## 💡 使用指导

使用优化系统：

1. 从VAN命令开始初始化并确定复杂度
2. 遵循适合复杂度的工作流程
3. 使用适合任务复杂度的渐进式文档
4. 让系统管理规则加载和上下文保持
5. 享受改进的令牌效率，同时保持结构化开发