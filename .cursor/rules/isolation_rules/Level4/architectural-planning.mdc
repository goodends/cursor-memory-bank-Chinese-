---
description: Architectural planning guidelines for Level 4 Complex System tasks
globs: architectural-planning.mdc
alwaysApply: false
---
# 四级任务架构规划

> **简要说明：** 本文档概述了四级（复杂系统）任务的综合架构规划方法，确保产生的架构是稳健、可扩展、可维护的，并与业务目标和技术需求保持一致。

## 🔍 架构规划概述

四级复杂系统任务需要彻底的架构规划，以确保产生的系统是稳健、可扩展、可维护的，并与业务目标保持一致。本文档概述了一种结构化的架构规划方法，系统地解决关键关注点并产生综合文档。

```mermaid
flowchart TD
    classDef phase fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef artifact fill:#f4b8c4,stroke:#d498a4,color:#000
    classDef verification fill:#c5e8b7,stroke:#a5c897,color:#000
    
    Start([开始架构<br>规划]) --> Reqs[分析<br>需求]
    Reqs --> Context[定义业务<br>上下文]
    Context --> Vision[建立愿景<br>和目标]
    Vision --> Principles[定义架构<br>原则]
    Principles --> Constraints[识别<br>约束]
    Constraints --> Explore[探索<br>替代方案]
    Explore --> Evaluate[评估<br>选项]
    Evaluate --> Decision[文档化<br>决策]
    Decision --> Create[创建架构<br>文档]
    Create --> Validate[验证<br>架构]
    Validate --> Communicate[沟通<br>架构]
    Communicate --> Verification{架构<br>验证}
    Verification -->|通过| Complete([架构规划<br>完成])
    Verification -->|失败| Revise[修订<br>架构]
    Revise --> Verification
    
    Reqs -.-> ReqDoc((需求<br>文档))
    Context -.-> ConDoc((上下文<br>文档))
    Vision -.-> VisDoc((愿景<br>文档))
    Principles -.-> PrinDoc((原则<br>文档))
    Explore -.-> AltDoc((替代方案<br>分析))
    Decision -.-> ADR((架构<br>决策记录))
    Create -.-> ArchDoc((架构<br>文档))
    
    class Start,Complete milestone
    class Reqs,Context,Vision,Principles,Constraints,Explore,Evaluate,Decision,Create,Validate,Communicate,Revise step
    class Verification verification
    class ReqDoc,ConDoc,VisDoc,PrinDoc,AltDoc,ADR,ArchDoc artifact
```

## 📋 架构规划原则

1. **业务对齐**：架构必须直接支持业务目标和用户需求。
2. **面向未来**：架构必须预期未来需求并促进变更。
3. **简洁性**：在可能的情况下，优先选择简单解决方案而非复杂解决方案。
4. **关注点分离**：系统应该被分为具有最小重叠的不同组件。
5. **深度防御**：应该采用多层安全控制。
6. **松耦合**：组件应该通过定义良好的接口进行交互，具有最小依赖关系。
7. **高内聚**：相关功能应该组合在一起，不相关功能应该分离。
8. **弹性**：架构应该预期故障并提供恢复机制。
9. **可扩展性**：架构应该支持用户、数据和功能的增长。
10. **可测量性**：架构应该能够监控和测量关键指标。

## 📋 架构需求分析

从综合需求分析开始架构规划：

### 功能需求分析

```mermaid
flowchart LR
    classDef req fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef arch fill:#a8d5ff,stroke:#88b5e0,color:#000
    
    FR[功能<br>需求] --> USE[用例/<br>用户故事]
    USE --> DOM[领域<br>模型]
    DOM --> COMP[组件<br>识别]
    COMP --> INT[接口<br>定义]
    INT --> FLOW[信息<br>流]
    
    class FR,USE,DOM req
    class COMP,INT,FLOW arch
```

**功能需求分析模板：**

```markdown
## 功能需求分析

### 关键用例
- 用例1：[描述]
- 用例2：[描述]
- 用例3：[描述]

### 领域模型
- 实体1：[描述和属性]
- 实体2：[描述和属性]
- 实体3：[描述和属性]
- 关系：
  - 实体1 → 实体2：[关系类型和描述]
  - 实体2 → 实体3：[关系类型和描述]

### 组件识别
- 组件1：[描述和职责]
- 组件2：[描述和职责]
- 组件3：[描述和职责]

### 接口定义
- 接口1：[描述、方法、参数]
- 接口2：[描述、方法、参数]
- 接口3：[描述、方法、参数]

### 信息流
- 流1：[信息交换描述]
- 流2：[信息交换描述]
- 流3：[信息交换描述]
```

### 非功能需求分析

```mermaid
flowchart LR
    classDef req fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef arch fill:#a8d5ff,stroke:#88b5e0,color:#000
    
    NFR[非功能<br>需求] --> PERF[性能<br>需求]
    NFR --> SEC[安全<br>需求]
    NFR --> SCAL[可扩展性<br>需求]
    NFR --> AVAIL[可用性<br>需求]
    NFR --> MAINT[可维护性<br>需求]
    
    PERF & SEC & SCAL & AVAIL & MAINT --> ARCH[架构<br>决策]
    
    class NFR,PERF,SEC,SCAL,AVAIL,MAINT req
    class ARCH arch
```

**非功能需求分析模板：**

```markdown
## 非功能需求分析

### 性能需求
- 响应时间：[需求]
- 吞吐量：[需求]
- 资源利用率：[需求]
- 架构影响：[对架构的影响]

### 安全需求
- 身份验证：[需求]
- 授权：[需求]
- 数据保护：[需求]
- 审计/日志记录：[需求]
- 架构影响：[对架构的影响]

### 可扩展性需求
- 用户可扩展性：[需求]
- 数据可扩展性：[需求]
- 事务可扩展性：[需求]
- 架构影响：[对架构的影响]

### 可用性需求
- 正常运行时间需求：[需求]
- 容错性：[需求]
- 灾难恢复：[需求]
- 架构影响：[对架构的影响]

### 可维护性需求
- 模块化：[需求]
- 可扩展性：[需求]
- 可测试性：[需求]
- 架构影响：[对架构的影响]
```

## 📋 业务上下文文档

文档化业务上下文以确保架构对齐：

```markdown
## 业务上下文文档

### 业务目标
- 目标1：[描述]
- 目标2：[描述]
- 目标3：[描述]

### 关键利益相关者
- 利益相关者群体1：[描述、需求和关注点]
- 利益相关者群体2：[描述、需求和关注点]
- 利益相关者群体3：[描述、需求和关注点]

### 业务流程
- 流程1：[描述和流程]
- 流程2：[描述和流程]
- 流程3：[描述和流程]

### 业务约束
- 约束1：[描述和影响]
- 约束2：[描述和影响]
- 约束3：[描述和影响]

### 业务指标
- 指标1：[描述和目标]
- 指标2：[描述和目标]
- 指标3：[描述和目标]
```

## 📋 业务风险

文档化业务风险：

```markdown
## 业务风险

### 风险1：[描述、概率、影响和缓解措施]
- 风险1：[描述、概率、影响和缓解措施]
- 风险2：[描述、概率、影响和缓解措施]
- 风险3：[描述、概率、影响和缓解措施]
```

## 📋 架构愿景和目标

文档化架构愿景和目标：

```markdown
## 架构愿景和目标

### 愿景声明
[架构愿景的简洁声明]

### 战略目标
- 目标1：[描述和成功标准]
- 目标2：[描述和成功标准]
- 目标3：[描述和成功标准]

### 质量属性
- 质量属性1：[描述和重要性]
- 质量属性2：[描述和重要性]
- 质量属性3：[描述和重要性]

### 技术路线图
- 短期（0-6个月）：[关键架构里程碑]
- 中期（6-18个月）：[关键架构里程碑]
- 长期（18个月以上）：[关键架构里程碑]

### 关键成功指标
- 指标1：[描述和测量方法]
- 指标2：[描述和测量方法]
- 指标3：[描述和测量方法]
```

## 📋 架构原则

文档化架构原则以指导决策制定：

```markdown
## 架构原则

### 原则1：[名称]
- **声明**：[原则的简洁声明]
- **理由**：[为什么这个原则很重要]
- **影响**：[这个原则对架构意味着什么]
- **示例**：[应用这个原则的示例]

### 原则2：[名称]
- **声明**：[原则的简洁声明]
- **理由**：[为什么这个原则很重要]
- **影响**：[这个原则对架构意味着什么]
- **示例**：[应用这个原则的示例]

### 原则3：[名称]
- **声明**：[原则的简洁声明]
- **理由**：[为什么这个原则很重要]
- **影响**：[这个原则对架构意味着什么]
- **示例**：[应用这个原则的示例]

...
```

## 📋 约束识别

文档化影响架构决策的约束：

```markdown
## 架构约束

### 技术约束
- 约束1：[描述和影响]
- 约束2：[描述和影响]
- 约束3：[描述和影响]

### 组织约束
- 约束1：[描述和影响]
- 约束2：[描述和影响]
- 约束3：[描述和影响]

### 外部约束
- 约束1：[描述和影响]
- 约束2：[描述和影响]
- 约束3：[描述和影响]

### 监管/合规约束
- 约束1：[描述和影响]
- 约束2：[描述和影响]
- 约束3：[描述和影响]

### 资源约束
- 约束1：[描述和影响]
- 约束2：[描述和影响]
- 约束3：[描述和影响]
```

## 📋 架构替代方案探索

文档化和评估架构替代方案：

```markdown
## 架构替代方案

### 替代方案1：[名称]
- **描述**：[替代方案的简要描述]
- **关键组件**：
  - 组件1：[描述]
  - 组件2：[描述]
  - 组件3：[描述]
- **优势**：
  - [优势1]
  - [优势2]
  - [优势3]
- **劣势**：
  - [劣势1]
  - [劣势2]
  - [劣势3]
- **风险**：
  - [风险1]
  - [风险2]
  - [风险3]
- **成本因素**：
  - [成本因素1]
  - [成本因素2]
  - [成本因素3]
- **与需求的对齐**：
  - [此替代方案如何满足需求]

### 替代方案2：[名称]
...

### 替代方案3：[名称]
...

## 评估标准
- 标准1：[描述和权重]
- 标准2：[描述和权重]
- 标准3：[描述和权重]

## 评估矩阵
| 标准 | 替代方案1 | 替代方案2 | 替代方案3 |
|------|-----------|-----------|-----------|
| 标准1 | 分数 | 分数 | 分数 |
| 标准2 | 分数 | 分数 | 分数 |
| 标准3 | 分数 | 分数 | 分数 |
| 总计 | 总和 | 总和 | 总和 |

## 推荐方法
[推荐架构方法的描述和论证]
```

## 📋 架构决策记录（ADRs）

文档化关键架构决策：

```markdown
# 架构决策记录：[决策标题]

## 状态
[提议/接受/弃用/替代]

## 上下文
[上下文和问题陈述的描述]

## 决策
[所做决策的描述]

## 后果
[决策后果的描述]

## 考虑的替代方案
[考虑的替代方案描述]

## 相关决策
[相关决策的引用]

## 注释
[附加注释和考虑因素]
```

## 📋 综合架构文档

创建综合架构文档：

### 系统上下文图

```mermaid
flowchart TD
    classDef system fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef external fill:#a8d5ff,stroke:#88b5e0,color:#000
    classDef user fill:#c5e8b7,stroke:#a5c897,color:#000
    
    U1[用户1] --> S[系统]
    U2[用户2] --> S
    S --> E1[外部<br>系统1]
    S --> E2[外部<br>系统2]
    S --> E3[外部<br>系统3]
    
    class S system
    class E1,E2,E3 external
    class U1,U2 user
```

### 高级架构图

```mermaid
flowchart TD
    classDef frontend fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef backend fill:#a8d5ff,stroke:#88b5e0,color:#000
    classDef data fill:#c5e8b7,stroke:#a5c897,color:#000
    classDef integration fill:#f4b8c4,stroke:#d498a4,color:#000
    
    U[用户] --> F[前端<br>层]
    F --> B[后端<br>层]
    B --> D[数据<br>层]
    B --> I[集成<br>层]
    I --> E[外部<br>系统]
    
    class F frontend
    class B backend
    class D data
    class I integration
    class U,E external
```

### 组件架构图

```mermaid
flowchart TD
    classDef ui fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef service fill:#a8d5ff,stroke:#88b5e0,color:#000
    classDef data fill:#c5e8b7,stroke:#a5c897,color:#000
    
    UI[用户界面] --> API[API网关]
    API --> S1[服务1]
    API --> S2[服务2]
    API --> S3[服务3]
    S1 --> DB1[数据库1]
    S2 --> DB1
    S2 --> DB2[数据库2]
    S3 --> DB2
    
    class UI ui
    class API,S1,S2,S3 service
    class DB1,DB2 data
```

### 数据架构图

```mermaid
flowchart TD
    classDef entity fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef relation fill:#a8d5ff,stroke:#88b5e0,color:#000
    
    E1[实体1] -- 1:N --> E2[实体2]
    E1 -- 1:1 --> E3[实体3]
    E2 -- N:M --> E4[实体4]
    E3 -- 1:N --> E4
    
    class E1,E2,E3,E4 entity
```

### 安全架构图

```mermaid
flowchart TD
    classDef security fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef app fill:#a8d5ff,stroke:#88b5e0,color:#000
    
    U[用户] --> WAF[Web应用<br>防火墙]
    WAF --> LB[负载<br>均衡器]
    LB --> API[API网关]
    API --> AuthZ[授权<br>服务]
    API --> S1[服务1]
    API --> S2[服务2]
    AuthZ --> IAM[身份与<br>访问管理]
    
    class WAF,AuthZ,IAM security
    class API,S1,S2 app
    class U,LB external
```

### 部署架构图

```mermaid
flowchart TD
    classDef env fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef component fill:#a8d5ff,stroke:#88b5e0,color:#000
    
    subgraph 生产环境
    LB[负载均衡器] --> W1[Web服务器1]
    LB --> W2[Web服务器2]
    W1 & W2 --> A1[应用服务器1]
    W1 & W2 --> A2[应用服务器2]
    A1 & A2 --> DB[数据库<br>集群]
    end
    
    class 生产环境 env
    class LB,W1,W2,A1,A2,DB component
```

### 架构文档模板

```markdown
# 系统架构文档

## 1. 介绍
- **目的**：[架构的目的]
- **范围**：[架构的范围]
- **受众**：[文档的目标受众]
- **参考**：[相关文档和参考资料]

## 2. 系统上下文
- **系统目的**：[系统目的的简要描述]
- **上下文图**：[系统上下文图]
- **外部系统**：[外部系统和接口的描述]
- **用户类型**：[用户类型和交互的描述]

## 3. 架构概述
- **架构风格**：[架构风格/模式的描述]
- **高级架构**：[高级架构图]
- **关键组件**：[关键组件概述]
- **技术栈**：[技术栈概述]

## 4. 组件架构
- **组件图**：[组件架构图]
- **组件描述**：
  - 组件1：[描述、职责、接口]
  - 组件2：[描述、职责、接口]
  - 组件3：[描述、职责、接口]
- **组件交互**：[组件交互的描述]
- **API规范**：[关键API概述]

## 5. 数据架构
- **数据模型**：[数据架构图]
- **实体描述**：
  - 实体1：[描述、属性、关系]
  - 实体2：[描述、属性、关系]
  - 实体3：[描述、属性、关系]
- **数据存储**：[数据存储方法的描述]
- **数据访问**：[数据访问模式的描述]
- **数据迁移**：[数据迁移方法概述]

## 6. 安全架构
- **安全模型**：[安全架构图]
- **身份验证**：[身份验证方法]
- **授权**：[授权方法]
- **数据保护**：[数据保护机制]
- **安全控制**：[关键安全控制]
- **审计和日志记录**：[审计和日志记录方法]

## 7. 部署架构
- **部署模型**：[部署架构图]
- **环境描述**：
  - 环境1：[描述和配置]
  - 环境2：[描述和配置]
  - 环境3：[描述和配置]
- **基础设施需求**：[基础设施需求]
- **扩展方法**：[扩展方法]

## 8. 质量属性
- **性能**：[性能特征和机制]
- **可扩展性**：[可扩展性方法]
- **可用性**：[可用性方法]
- **可维护性**：[可维护性方法]
- **可靠性**：[可靠性方法]
- **可移植性**：[可移植性考虑]

## 9. 横切关注点
- **日志记录**：[日志记录方法]
- **错误处理**：[错误处理方法]
- **监控**：[监控方法]
- **配置管理**：[配置管理方法]
- **国际化**：[国际化方法]

## 10. 架构决策
- [架构决策记录的引用]

## 11. 风险和缓解措施
- 风险1：[描述和缓解措施]
- 风险2：[描述和缓解措施]
- 风险3：[描述和缓解措施]

## 12. 术语表
- 术语1：[定义]
- 术语2：[定义]
- 术语3：[定义]
```

## 📋 架构验证

根据需求和原则验证架构：

```markdown
## 架构验证

### 需求覆盖
- 需求1：[已覆盖/部分覆盖/未覆盖] - [说明]
- 需求2：[已覆盖/部分覆盖/未覆盖] - [说明]
- 需求3：[已覆盖/部分覆盖/未覆盖] - [说明]

### 原则对齐
- 原则1：[对齐/部分对齐/不对齐] - [说明]
- 原则2：[对齐/部分对齐/不对齐] - [说明]
- 原则3：[对齐/部分对齐/不对齐] - [说明]

### 质量属性场景
- 场景1：[描述和验证]
- 场景2：[描述和验证]
- 场景3：[描述和验证]

### 架构审查发现
- 发现1：[描述和解决方案]
- 发现2：[描述和解决方案]
- 发现3：[描述和解决方案]

### 风险评估
- 风险1：[描述、概率、影响和缓解措施]
- 风险2：[描述、概率、影响和缓解措施]
- 风险3：[描述、概率、影响和缓解措施]

### 验证结果
[验证结果摘要和后续步骤]
```

## 📋 架构沟通

向利益相关者沟通架构：

```markdown
## 架构沟通计划

### 关键利益相关者
- 利益相关者群体1：[沟通需求]
- 利益相关者群体2：[沟通需求]
- 利益相关者群体3：[沟通需求]

### 沟通材料
- **执行摘要**：[目的和受众]
- **技术参考**：[目的和受众]
- **开发者指南**：[目的和受众]
- **运维指南**：[目的和受众]

### 沟通时间表
- 事件1：[日期、受众、目的]
- 事件2：[日期、受众、目的]
- 事件3：[日期、受众、目的]

### 反馈机制
[如何收集和整合反馈的描述]
```

## 📋 记忆库集成

```mermaid
flowchart TD
    classDef memfile fill:#f4b8c4,stroke:#d498a4,color:#000
    classDef process fill:#f9d77e,stroke:#d9b95c,color:#000
    
    Architecture[架构<br>规划] --> PB[projectbrief.md]
    Architecture --> PC[productContext.md]
    Architecture --> SP[systemPatterns.md]
    Architecture --> TC[techContext.md]
    
    PB & PC & SP & TC --> MBI[记忆库<br>集成]
    MBI --> Next[实施<br>阶段]
    
    class PB,PC,SP,TC memfile
    class Architecture,MBI,Next process
```

### 记忆库更新

在架构规划期间更新以下记忆库文件：

1. **projectbrief.md**
   - 用架构愿景更新
   - 文档化高级架构方法
   - 链接到架构文档

2. **productContext.md**
   - 用业务上下文文档更新
   - 文档化关键利益相关者需求
   - 捕获架构决策的业务驱动因素

3. **systemPatterns.md**
   - 文档化选择的架构模式和风格
   - 捕获关键架构决策及其理由
   - 文档化要使用的技术模式

4. **techContext.md**
   - 用技术栈决策更新
   - 文档化技术约束和考虑因素
   - 捕获集成方法

## 📋 架构规划验证检查清单

```
✓ 架构规划验证检查清单

需求分析
- 功能需求分析？ [是/否]
- 非功能需求分析？ [是/否]
- 领域模型创建？ [是/否]
- 组件识别完成？ [是/否]

业务上下文
- 业务目标文档化？ [是/否]
- 关键利益相关者识别？ [是/否]
- 业务流程文档化？ [是/否]
- 业务约束识别？ [是/否]

愿景和目标
- 架构愿景陈述？ [是/否]
- 战略目标定义？ [是/否]
- 质量属性识别？ [是/否]
- 技术路线图创建？ [是/否]

架构原则
- 核心原则定义？ [是/否]
- 原则有清晰理由？ [是/否]
- 原则影响文档化？ [是/否]
- 应用原则的示例提供？ [是/否]

约束识别
- 技术约束文档化？ [是/否]
- 组织约束文档化？ [是/否]
- 外部约束文档化？ [是/否]
- 监管约束文档化？ [是/否]

替代方案探索
- 多个替代方案识别？ [是/否]
- 替代方案根据标准评估？ [是/否]
- 优势和劣势文档化？ [是/否]
- 推荐方法论证？ [是/否]

架构文档
- 系统上下文文档化？ [是/否]
- 高级架构文档化？ [是/否]
- 组件架构文档化？ [是/否]
- 数据架构文档化？ [是/否]
- 安全架构文档化？ [是/否]
- 部署架构文档化？ [是/否]

架构验证
- 需求覆盖验证？ [是/否]
- 原则对齐检查？ [是/否]
- 质量属性场景评估？ [是/否]
- 架构审查进行？ [是/否]

记忆库集成
- projectbrief.md更新？ [是/否]
- productContext.md更新？ [是/否]
- systemPatterns.md更新？ [是/否]
- techContext.md更新？ [是/否]
```

## 📋 最小模式架构规划格式

对于需要更紧凑架构规划方法的情况：

```markdown
## 四级架构规划：[系统名称]

### 系统上下文
- **目的**：[系统目的的简要描述]
- **用户**：[主要用户]
- **外部系统**：[关键外部系统]

### 关键架构决策
- **架构风格**：[选择的风格及简要理由]
- **组件结构**：[关键组件及简要描述]
- **数据模型**：[数据方法的简要描述]
- **技术栈**：[关键技术]

### 质量属性
- **性能**：[方法的简要描述]
- **安全**：[方法的简要描述]
- **可扩展性**：[方法的简要描述]
- **可维护性**：[方法的简要描述]

### 架构图
[简单架构图]

### 关键风险和缓解措施
- **风险1**：[简要描述] - **缓解**：[简要方法]
- **风险2**：[简要描述] - **缓解**：[简要方法]

### 记忆库更新
- [所需更新的简要描述]
```

## 🚨 架构规划执行原则

```
┌─────────────────────────────────────────────────────┐
│ 架构规划对于四级任务是强制性的。在架构规划完成并获得批准之前，│
│ 不能开始实施。                                        │
└─────────────────────────────────────────────────────┘
``` 