---
description: Advanced task tracking for Level 4 Complex System tasks
globs: "**/level4/**", "**/task-tracking/**"
alwaysApply: false
---
# 四级任务的高级任务跟踪

> **简要说明：** 本文档概述了四级（复杂系统）任务的综合任务跟踪方法，确保对复杂的多阶段工作进行详细跟踪，包括清晰的依赖关系、进度跟踪和架构对齐。

## 🔍 高级任务跟踪概述

四级复杂系统任务需要复杂的任务跟踪来管理系统开发的复杂性，协调多个团队成员，跟踪依赖关系，并确保与架构原则的对齐。本文档概述了此类复杂工作的综合任务跟踪方法。

```mermaid
flowchart TD
    classDef phase fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef artifact fill:#f4b8c4,stroke:#d498a4,color:#000
    classDef verification fill:#c5e8b7,stroke:#a5c897,color:#000
    
    Start([开始任务<br>跟踪]) --> Framework[建立任务<br>框架]
    Framework --> Hierarchy[定义任务<br>层次结构]
    Hierarchy --> Breakdown[创建工作<br>分解结构]
    Breakdown --> Dependencies[记录<br>依赖关系]
    Dependencies --> Milestones[定义关键<br>里程碑]
    Milestones --> Schedule[创建<br>时间表]
    Schedule --> Resources[定义资源<br>分配]
    Resources --> Risks[记录<br>风险]
    Risks --> Quality[定义质量<br>指标]
    Quality --> Progress[跟踪<br>进度]
    Progress --> Adaptations[记录<br>适应性调整]
    Adaptations --> Verification{任务跟踪<br>验证}
    Verification -->|通过| Complete([任务跟踪<br>完成])
    Verification -->|失败| Revise[修订任务<br>跟踪]
    Revise --> Verification
    
    Framework -.-> TF((任务<br>框架))
    Hierarchy -.-> TH((任务<br>层次结构))
    Breakdown -.-> WBS((工作分解<br>结构))
    Dependencies -.-> DP((依赖关系<br>矩阵))
    Milestones -.-> MS((里程碑<br>文档))
    Schedule -.-> SC((时间表<br>文档))
    Resources -.-> RA((资源<br>分配))
    Risks -.-> RM((风险<br>管理))
    Quality -.-> QM((质量<br>指标))
    Progress -.-> PT((进度<br>跟踪))
    Adaptations -.-> AD((适应性调整<br>文档))
    
    class Start,Complete milestone
    class Framework,Hierarchy,Breakdown,Dependencies,Milestones,Schedule,Resources,Risks,Quality,Progress,Adaptations,Revise step
    class Verification verification
    class TF,TH,WBS,DP,MS,SC,RA,RM,QM,PT,AD artifact
```

## 📋 任务跟踪原则

1. **架构对齐**：所有任务必须与既定的架构原则和模式对齐。
2. **层次化组织**：任务按层次结构组织，具有清晰的父子关系。
3. **依赖关系管理**：所有任务依赖关系都明确记录和跟踪。
4. **进度透明性**：任务状态和进度对所有利益相关者清晰记录和可见。
5. **质量集成**：质量指标和验证集成到任务定义中。
6. **资源分配**：任务包括完成所需资源的清晰分配。
7. **风险意识**：每个重要任务都包括风险评估和缓解策略。
8. **适应性规划**：任务跟踪在保持系统完整性的同时适应变化和调整。
9. **里程碑跟踪**：定义清晰的里程碑并用于跟踪整体进度。
10. **全面文档化**：任务生命周期的所有方面都得到彻底记录。

## 📋 任务层次结构

四级任务遵循层次结构：

```mermaid
flowchart TD
    classDef system fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef component fill:#a8d5ff,stroke:#88b5e0,color:#000
    classDef feature fill:#c5e8b7,stroke:#a5c897,color:#000
    classDef task fill:#f4b8c4,stroke:#d498a4,color:#000
    classDef subtask fill:#d8c1f7,stroke:#b8a1d7,color:#000
    
    System[系统级工作] --> Component1[组件 1]
    System --> Component2[组件 2]
    System --> Component3[组件 3]
    
    Component1 --> Feature1[功能 1.1]
    Component1 --> Feature2[功能 1.2]
    
    Feature1 --> Task1[任务 1.1.1]
    Feature1 --> Task2[任务 1.1.2]
    
    Task1 --> Subtask1[子任务 1.1.1.1]
    Task1 --> Subtask2[子任务 1.1.1.2]
    Task1 --> Subtask3[子任务 1.1.1.3]
    
    class System system
    class Component1,Component2,Component3 component
    class Feature1,Feature2 feature
    class Task1,Task2 task
    class Subtask1,Subtask2,Subtask3 subtask
```

### 层次级别：

1. **系统级别**：正在构建或修改的整体系统。
2. **组件级别**：系统的主要组件或子系统。
3. **功能级别**：每个组件内的特定功能。
4. **任务级别**：实现功能所需的具体任务。
5. **子任务级别**：复杂任务的详细子任务。

## 📋 综合任务结构

`tasks.md`中的每个四级任务都遵循这种综合结构：

```markdown
## [系统-ID]：系统名称

### 系统概述
- **目的**：[系统目的的简要描述]
- **架构对齐**：[系统如何与架构原则对齐]
- **状态**：[规划中/进行中/审查中/完成]
- **里程碑**： 
  - 里程碑 1：[日期] - [状态]
  - 里程碑 2：[日期] - [状态]
  - 里程碑 3：[日期] - [状态]

### 组件
#### [组件-ID]：组件名称
- **目的**：[组件目的的简要描述]
- **状态**：[规划中/进行中/审查中/完成]
- **依赖关系**：[依赖关系列表]
- **负责人**：[负责的团队或个人]

##### [功能-ID]：功能名称
- **描述**：[功能描述]
- **状态**：[规划中/进行中/审查中/完成]
- **优先级**：[关键/高/中/低]
- **相关需求**：[此功能解决的需求ID列表]
- **质量标准**：[完成的可衡量标准]
- **进度**：[0-100%]

###### [任务-ID]：任务名称
- **描述**：[任务描述]
- **状态**：[待办/进行中/审查中/完成]
- **分配给**：[受让人]
- **预估工作量**：[工作量估算]
- **实际工作量**：[实际工作量]
- **依赖关系**：[此任务依赖的任务]
- **阻塞**：[被此任务阻塞的任务]
- **风险评估**：[风险级别和描述]
- **质量门禁**：[必须通过的质量门禁]
- **实施说明**：[关键实施说明]

**子任务**：
- [ ] [子任务-ID]：[子任务描述] - [状态]
- [ ] [子任务-ID]：[子任务描述] - [状态]
- [ ] [子任务-ID]：[子任务描述] - [状态]

### 系统级任务
- [ ] [系统任务-ID]：[系统级任务描述] - [状态]
- [ ] [系统任务-ID]：[系统级任务描述] - [状态]

### 风险和缓解措施
- **风险 1**：[描述] - **缓解措施**：[缓解策略]
- **风险 2**：[描述] - **缓解措施**：[缓解策略]

### 进度摘要
- **整体进度**：[0-100%]
- **组件 1**：[0-100%]
- **组件 2**：[0-100%]
- **组件 3**：[0-100%]

### 最新更新
- [日期]：[更新描述]
- [日期]：[更新描述]
```

## 📋 TASKS.MD中的任务跟踪组织

对于四级复杂系统任务，按如下方式组织`tasks.md`：

```markdown
# 任务跟踪

## 活跃系统
- [系统-ID]：[系统名称] - [状态]
- [系统-ID]：[系统名称] - [状态]

## 系统详情

[按照上述模板为每个系统提供详细的任务结构]

## 已完成系统
- [系统-ID]：[系统名称] - 完成于 [日期]
- [系统-ID]：[系统名称] - 完成于 [日期]

## 系统依赖关系
```mermaid
graph TD
    System1 --> System2
    System1 --> System3
    System2 --> System4
```

## 风险登记册
| 风险ID | 描述 | 概率 | 影响 | 缓解措施 |
|---------|-------------|-------------|--------|------------|
| RISK-01 | [描述] | 高/中/低 | 高/中/低 | [策略] |
| RISK-02 | [描述] | 高/中/低 | 高/中/低 | [策略] |

## 资源分配
| 资源 | 系统 | 分配% | 时间段 |
|----------|--------|--------------|------------|
| [姓名/团队] | [系统-ID] | [%] | [开始-结束] |
| [姓名/团队] | [系统-ID] | [%] | [开始-结束] |
```

## 📋 依赖关系管理

```mermaid
flowchart TD
    classDef critical fill:#f8707e,stroke:#d85060,color:#000
    classDef high fill:#f9d77e,stroke:#d9b95c,color:#000
    classDef medium fill:#a8d5ff,stroke:#88b5e0,color:#000
    classDef low fill:#c5e8b7,stroke:#a5c897,color:#000
    
    Task1[任务 1] --> Task2[任务 2]
    Task1 --> Task3[任务 3]
    Task2 --> Task4[任务 4]
    Task3 --> Task4
    Task4 --> Task5[任务 5]
    Task4 --> Task6[任务 6]
    Task5 --> Task7[任务 7]
    Task6 --> Task7
    
    class Task1,Task4,Task7 critical
    class Task2,Task5 high
    class Task3 medium
    class Task6 low
```

对于复杂系统，在专门的部分记录依赖关系：

```markdown
## 依赖关系矩阵

| 任务ID | 依赖于 | 阻塞 | 类型 | 状态 |
|---------|------------|--------|------|--------|
| TASK-01 | - | TASK-02, TASK-03 | 技术 | 已完成 |
| TASK-02 | TASK-01 | TASK-04 | 技术 | 进行中 |
| TASK-03 | TASK-01 | TASK-04 | 资源 | 未开始 |
| TASK-04 | TASK-02, TASK-03 | TASK-05, TASK-06 | 技术 | 未开始 |
```

### 依赖关系类型：
- **技术**：一个任务在技术上需要另一个任务首先完成
- **资源**：任务竞争相同的资源
- **信息**：一个任务需要另一个任务产生的信息
- **架构**：任务具有架构依赖关系
- **时间**：任务必须按特定时间顺序完成

## 📋 里程碑跟踪

对于四级任务，明确跟踪里程碑：

```markdown
## 系统里程碑

| 里程碑ID | 描述 | 目标日期 | 实际日期 | 状态 | 交付物 |
|--------------|-------------|-------------|-------------|--------|--------------|
| MILE-01 | 架构已批准 | [日期] | [日期] | 已完成 | 架构文档 |
| MILE-02 | 组件设计完成 | [日期] | - | 进行中 | 设计文档 |
| MILE-03 | 组件1实施 | [日期] | - | 未开始 | 代码、测试 |
| MILE-04 | 集成完成 | [日期] | - | 未开始 | 集成系统 |
| MILE-05 | 系统测试完成 | [日期] | - | 未开始 | 测试报告 |
| MILE-06 | 部署就绪 | [日期] | - | 未开始 | 部署包 |
```

## 📋 进度可视化

在`tasks.md`中包含进度的可视化表示：

```markdown
## 进度可视化

### 整体系统进度
```mermaid
pie title 系统进度
    "已完成" : 30
    "进行中" : 25
    "未开始" : 45
```

### 组件进度
```mermaid
graph TD
    subgraph 进度
    C1[组件 1: 75%]
    C2[组件 2: 50%]
    C3[组件 3: 20%]
    C4[组件 4: 5%]
    end
```

### 时间线
```mermaid
gantt
    title 系统时间线
    dateFormat  YYYY-MM-DD
    
    section 架构
    架构设计    :done, arch, 2023-01-01, 30d
    架构审查    :done, arch-rev, after arch, 10d
    
    section 组件 1
    设计                 :active, c1-des, after arch-rev, 20d
    实施         :c1-imp, after c1-des, 40d
    测试                :c1-test, after c1-imp, 15d
    
    section 组件 2
    设计                 :active, c2-des, after arch-rev, 25d
    实施         :c2-imp, after c2-des, 50d
    测试                :c2-test, after c2-imp, 20d
```
```

## 📋 更新任务状态

对于四级任务，状态更新包括：

1. **进度更新**：更新任务状态和进度百分比
2. **工作量跟踪**：记录实际工作量与估算的对比
3. **风险更新**：更新风险评估和缓解措施
4. **依赖关系状态**：更新依赖关系的状态
5. **里程碑跟踪**：更新里程碑状态
6. **问题记录**：记录遇到的问题
7. **适应性调整记录**：记录对原计划的任何调整
8. **质量门禁状态**：更新质量门禁的状态

状态更新周期：
- **每日**：更新任务和子任务状态
- **每周**：更新组件状态和进度可视化
- **双周**：更新系统级进度和里程碑状态
- **每月**：完成系统审查，包括风险和适应性调整

## 📋 任务跟踪验证检查清单

```
✓ 任务跟踪验证检查清单

任务结构
- 系统级工作正确定义？ [是/否]
- 组件级任务已识别？ [是/否]
- 功能级任务已指定？ [是/否]
- 任务级详情已提供？ [是/否]
- 复杂任务已创建子任务？ [是/否]

任务信息
- 所有任务都有清晰的描述？ [是/否]
- 状态准确反映？ [是/否]
- 正确分配？ [是/否]
- 提供工作量估算？ [是/否]
- 依赖关系已记录？ [是/否]

进度跟踪
- 整体进度已计算？ [是/否]
- 组件进度已更新？ [是/否]
- 里程碑状态已更新？ [是/否]
- 进度可视化是最新的？ [是/否]
- 最新更新已记录？ [是/否]

风险管理
- 风险已识别和评估？ [是/否]
- 缓解策略已记录？ [是/否]
- 风险登记册已更新？ [是/否]
- 对时间表的影响已评估？ [是/否]
- 应急计划已记录？ [是/否]

资源分配
- 资源已分配给任务？ [是/否]
- 资源冲突已识别？ [是/否]
- 资源分配已优化？ [是/否]
- 未来资源需求已预测？ [是/否]
- 资源分配已记录？ [是/否]

质量集成
- 任务的质量标准已定义？ [是/否]
- 质量门禁已指定？ [是/否]
- 验证程序已记录？ [是/否]
- 质量指标正在跟踪？ [是/否]
- 质量问题已记录？ [是/否]

架构对齐
- 任务与架构对齐？ [是/否]
- 架构依赖关系已跟踪？ [是/否]
- 架构约束已记录？ [是/否]
- 架构演进已跟踪？ [是/否]
- 架构决策已记录？ [是/否]
```

## 📋 与记忆库的集成

四级任务跟踪与记忆库紧密集成：

1. **projectbrief.md**：系统级任务源自项目简介并与之链接
2. **productContext.md**：任务与业务上下文和目标对齐
3. **systemPatterns.md**：任务尊重并实施定义的架构模式
4. **techContext.md**：任务与技术栈和约束对齐
5. **activeContext.md**：来自`tasks.md`的当前焦点和状态为活跃上下文提供信息
6. **progress.md**：来自`tasks.md`的系统进度反映在整体进度中

```mermaid
flowchart TD
    classDef memfile fill:#f4b8c4,stroke:#d498a4,color:#000
    classDef process fill:#f9d77e,stroke:#d9b95c,color:#000
    
    TaskTracking[高级任务<br>跟踪] --> PB[projectbrief.md]
    TaskTracking --> PC[productContext.md]
    TaskTracking --> AC[activeContext.md]
    TaskTracking --> SP[systemPatterns.md]
    TaskTracking --> TC[techContext.md]
    TaskTracking --> P[progress.md]
    
    P --> TU[任务<br>更新]
    TU --> TaskTracking
    
    class PB,PC,AC,SP,TC,P memfile
    class TaskTracking,TU process
```

## 📋 最小模式任务跟踪

对于需要更紧凑跟踪方法的情况：

```markdown
## [系统-ID]：系统名称 - [状态]

### 关键组件：
- [组件-ID]：[组件名称] - [状态] - [进度 %]
- [组件-ID]：[组件名称] - [状态] - [进度 %]

### 活跃任务：
- [ ] [任务-ID]：[任务描述] - [受让人] - [状态]
  - 依赖关系：[任务ID列表]
  - 风险：[简要风险描述]
- [ ] [任务-ID]：[任务描述] - [受让人] - [状态]

### 里程碑：
- [里程碑-ID]：[里程碑描述] - [目标日期] - [状态]
- [里程碑-ID]：[里程碑描述] - [目标日期] - [状态]

### 关键路径：
- [任务-ID] → [任务-ID] → [任务-ID] → [任务-ID]
- [任务-ID] → [任务-ID] → [任务-ID]

### 更新：
- [日期]：[简要更新]
```

## 🚨 任务跟踪首要原则

```
┌─────────────────────────────────────────────────────┐
│ tasks.md是所有任务跟踪的唯一真实来源。所有任务相关  │
│ 的决策和状态更新必须在tasks.md中反映。              │
└─────────────────────────────────────────────────────┘
``` 