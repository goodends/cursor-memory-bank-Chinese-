---
description: 
globs: implementation-intermediate.mdc
alwaysApply: false
---
# 三级实施：构建中级功能

> **简要说明：** 本指南专注于已规划和设计的三级功能的系统实施。它强调模块化开发、严格遵循创意决策和样式指南、与现有系统集成以及全面的功能特定测试。

## 🛠️ 三级功能实施工作流程

此工作流程概述了构建中级功能的典型步骤。

```mermaid
graph TD
    StartImpl["开始三级实施"] -->
    ReviewDocs["1. 回顾所有相关文档<br>（任务、创意文档、样式指南）"] -->
    SetupEnv["2. 设置/验证开发环境<br>（分支、工具、依赖项）"] -->
    ModuleBreakdown["3. 将功能分解为模块/主要组件<br>（基于 `tasks.md` 中的计划）"] -->
    BuildIterate["4. 迭代实施模块/组件"]

    BuildIterate --> ImplementModule["4a. 选择下一个模块/组件"]
    ImplementModule --> CodeModule["4b. 编码模块<br>（遵循设计、样式指南、编码标准）"]
    CodeModule --> UnitTests["4c. 编写并通过单元测试"]
    UnitTests --> SelfReview["4d. 自我审查/代码检查"]
    SelfReview --> MoreModules{"4e. 此功能还有<br>更多模块？"}
    MoreModules -- 是 --> ImplementModule

    MoreModules -- 否 --> IntegrateModules["5. 集成所有功能模块/组件"]
    IntegrateModules --> IntegrationTesting["6. 执行集成测试<br>（功能模块 + 现有系统部分）"]
    IntegrationTesting --> E2EFeatureTesting["7. 端到端功能测试<br>（根据用户故事和需求验证）"]
    E2EFeatureTesting --> AccessibilityCheck["8. 可访问性和响应性检查<br>（如果涉及UI）"]
    AccessibilityCheck --> CodeCleanup["9. 代码清理和优化"]
    CodeCleanup --> UpdateMB["10. 更新记忆库<br>（`tasks.md` 子任务、`progress.md` 详情）"]
    UpdateMB --> FinalFeatureReview["11. 最终功能审查（如可能进行概念性同行审查）"]
    FinalFeatureReview --> ImplementationDone["三级实施完成<br>准备进入反思模式"]

    style StartImpl fill:#e57373,stroke:#f44336
    style BuildIterate fill:#ffcdd2,stroke:#ef9a9a
    style ImplementationDone fill:#ef9a9a,stroke:#e57373
```

## 🔑 三级实施的关键考虑因素

  * **模块化和封装：** 在定义明确、可重用和松耦合的模块或组件中设计和构建功能。
  * **遵循设计：** 严格遵循 `memory-bank/creative-*.md` 文件和 `memory-bank/style-guide.md` 中记录的决策。偏差必须有理由并记录。
  * **状态管理：** 如果功能引入或显著与复杂应用程序状态交互，确保状态管理策略（可能在创意模式中定义）得到正确实施和测试。
  * **API交互：**
      * 如果使用新的或现有的API，确保请求和响应得到正确处理，包括错误状态。
      * 如果作为功能的一部分暴露新的API端点，确保它们健壮、安全并有文档记录。
  * **错误处理：** 在功能范围内实施用户友好的错误消息和健壮的错误处理。
  * **性能：** 注意性能影响。避免常见陷阱，如N+1数据库查询、低效算法或大资产加载而不优化，特别是如果在计划或创意阶段被识别为关注点。
  * **安全性：** 以安全最佳实践为指导实施，特别是对于处理用户输入、身份验证或敏感数据的功能。参考创意模式中的任何安全设计决策。

## 🧪 三级功能的测试重点

  * **单元测试：** 功能组件内的每个新函数、方法或逻辑单元都应有相应的单元测试。目标是核心逻辑和边缘情况的良好覆盖。
  * **组件测试（用于UI功能）：** 独立测试UI组件，验证渲染、属性处理和事件发射。
  * **集成测试：** 对三级至关重要。测试新功能的不同模块/组件如何协同工作。同时，测试完成的功能如何与它交互的现有应用程序部分集成。
  * **用户场景/验收测试（功能特定）：** 从用户角度验证功能是否满足其定义的需求和用户故事。这可以是手动或自动化的。

## 📝 实施期间的文档

  * **`memory-bank/tasks.md`：** 更新与功能相关的子任务状态。注意任何阻塞因素或估算变化。
  * **`memory-bank/progress.md`：** 定期记录详细信息：
      * 完成的模块/组件。
      * 实施期间做出的关键决策（如果是次要的且不需要完整的创意周期）。
      * 显著修改的文件
      * 主要集成点的测试结果。
      * 任何偏离计划或创意设计的情况，以及理由。
  * **代码注释：** 编写清晰、简洁的注释，解释复杂逻辑、假设或待办事项。
  * **README文件（如适用）：** 如果功能引入需要特定设置或使用说明的新模块或库，考虑添加或更新相关的README文件。
