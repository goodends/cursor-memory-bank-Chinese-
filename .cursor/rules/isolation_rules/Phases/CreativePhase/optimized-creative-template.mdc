---
description: Optimized creative phase template with progressive documentation
globs: "**/creative*/**", "**/design*/**", "**/decision*/**"
alwaysApply: false
---
# 优化创意阶段模板

> **简要说明：** 此模板为创意阶段实施渐进式文档方法，在保持彻底设计探索的同时优化令牌使用。

## 📝 渐进式文档模型

```mermaid
graph TD
    Start["创意阶段开始"] --> P1["1️⃣ 问题<br>定义范围"]
    P1 --> P2["2️⃣ 选项<br>探索替代方案"]
    P2 --> P3["3️⃣ 分析<br>评估选定选项"]
    P3 --> P4["4️⃣ 决策<br>确定方法"]
    P4 --> P5["5️⃣ 实施<br>文档化指南"]
    
    style Start fill:#d971ff,stroke:#a33bc2,color:white
    style P1 fill:#4da6ff,stroke:#0066cc,color:white
    style P2 fill:#ffa64d,stroke:#cc7a30,color:white
    style P3 fill:#4dbb5f,stroke:#36873f,color:white
    style P4 fill:#d94dbb,stroke:#a3378a,color:white
    style P5 fill:#4dbbbb,stroke:#368787,color:white
```

## 📋 模板结构

```markdown
📌 创意阶段开始：[组件名称]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1️⃣ 问题
   描述：[简要问题描述]
   需求：[关键需求要点]
   约束：[技术或业务约束]

2️⃣ 选项
   选项A：[名称] - [一行描述]
   选项B：[名称] - [一行描述]
   选项C：[名称] - [一行描述]

3️⃣ 分析
   | 标准 | 选项A | 选项B | 选项C |
   |------|-------|-------|-------|
   | 性能 | ⭐⭐⭐ | ⭐⭐ | ⭐⭐⭐⭐ |
   | 复杂度 | ⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐⭐ |
   | 可维护性 | ⭐⭐⭐⭐ | ⭐⭐⭐ | ⭐⭐ |
   
   关键洞察：
   - [洞察1]
   - [洞察2]

4️⃣ 决策
   选择：[选项X]
   理由：[简要论证]
   
5️⃣ 实施说明
   - [实施说明1]
   - [实施说明2]
   - [实施说明3]

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📌 创意阶段结束
```

## 🧩 详细选项分析（按需提供）

可以按需为选定选项提供详细分析：

```markdown
<details>
  <summary>详细分析：选项A</summary>
  
  ### 选项A：[完整名称]
  
  **完整描述**：
  [选项如何工作的详细描述]
  
  **优点**：
  - [优点1及解释]
  - [优点2及解释]
  - [优点3及解释]
  
  **缺点**：
  - [缺点1及解释]
  - [缺点2及解释]
  
  **实施复杂度**：[低/中/高]
  [复杂度因素的解释]
  
  **资源需求**：
  [资源需求详情]
  
  **风险评估**：
  [风险分析]
</details>
```

## 📊 基于复杂度的扩展

模板根据任务复杂度级别自动扩展文档需求：

### 一级-二级（快速修复/增强）
- 简化问题/解决方案
- 专注于实施
- 最少选项探索

### 三级（功能开发）
- 需要多个选项
- 带关键标准的分析表
- 实施指南

### 四级（企业开发）
- 综合分析
- 考虑多个观点
- 详细实施计划
- 扩展验证标准

## ✅ 验证协议

质量验证被压缩为简单的检查清单：

```markdown
验证：
[x] 问题清晰定义
[x] 考虑多个选项
[x] 决策有理由支持
[x] 提供实施指导
```

## 🔄 使用示例

### 架构决策（三级）

```markdown
📌 创意阶段开始：身份验证系统
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1️⃣ 问题
   描述：为应用程序设计身份验证系统
   需求：安全、可扩展、支持SSO、易于维护
   约束：必须与现有用户数据库配合，<100ms响应时间

2️⃣ 选项
   选项A：基于JWT的无状态认证 - 简单的基于令牌的方法
   选项B：基于Redis的会话认证 - 服务器端会话存储
   选项C：OAuth2实施 - 委托授权框架

3️⃣ 分析
   | 标准 | JWT | 会话 | OAuth2 |
   |------|-----|------|--------|
   | 安全性 | ⭐⭐⭐ | ⭐⭐⭐⭐ | ⭐⭐⭐⭐⭐ |
   | 可扩展性 | ⭐⭐⭐⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐⭐ |
   | 复杂度 | ⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐⭐ |
   | 性能 | ⭐⭐⭐⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐ |
   
   关键洞察：
   - JWT提供最佳性能但撤销选项有限
   - 会话提供更好的安全控制但需要更多基础设施
   - OAuth2最复杂但提供最佳集成可能性

4️⃣ 决策
   选择：选项A：带刷新令牌的基于JWT认证
   理由：在满足安全需求的同时提供性能和可扩展性的最佳平衡
   
5️⃣ 实施说明
   - 使用HS256算法进行令牌签名
   - 实施短期访问令牌（15分钟）和长期刷新令牌（7天）
   - 在Redis中存储令牌黑名单以实现撤销功能
   - 在令牌端点添加速率限制

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📌 创意阶段结束
```

### 算法决策（二级）

```markdown
📌 创意阶段开始：搜索算法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1️⃣ 问题
   描述：为产品目录实施高效文本搜索
   需求：快速结果、支持部分匹配、不区分大小写
   约束：数据集 < 10,000项，必须在浏览器环境中工作

2️⃣ 选项
   选项A：简单正则表达式搜索 - 基本模式匹配
   选项B：基于Trie的搜索 - 前缀树结构
   选项C：带Levenshtein的模糊搜索 - 编辑距离算法

3️⃣ 决策
   选择：选项B：基于Trie的搜索
   理由：为前缀搜索提供最佳性能，内存使用可管理
   
4️⃣ 实施说明
   - 使用现有trie库
   - 在索引期间将文本预处理为小写
   - 实施逐字母搜索以获得即时结果
   - 添加防抖（300ms）以防止过度重建

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📌 创意阶段结束
```

## 🏆 令牌效率优势

此模板通过以下方式显著减少令牌使用：

1. 专注于基本信息，避免不必要的冗长
2. 使用紧凑的表格格式进行比较
3. 为详细信息实施渐进式披露
4. 根据任务复杂度扩展文档需求
5. 使用视觉指示器（表情符号）进行快速扫描

该模板在保持创意过程严谨性的同时，比之前的格式提高了约60%的令牌效率。