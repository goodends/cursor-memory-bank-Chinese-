---
description: Optimized Level 1 workflow for quick bug fixes with token efficiency
globs: optimized-workflow-level1.mdc
alwaysApply: false
---
# 优化的级别1工作流程

> **简要说明：** 这个针对级别1任务（快速错误修复）的精简工作流程优化了速度和令牌效率，同时保持质量。

## 🔧 级别1流程图

```mermaid
graph TD
    Start["开始级别1<br>快速修复"] --> Analyze["1️⃣ 分析<br>理解问题"]
    Analyze --> Implement["2️⃣ 实现<br>修复问题"]
    Implement --> Verify["3️⃣ 验证<br>测试修复"]
    Verify --> Document["4️⃣ 文档<br>记录解决方案"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style Analyze fill:#ffa64d,stroke:#cc7a30,color:white
    style Implement fill:#4dbb5f,stroke:#36873f,color:white
    style Verify fill:#d94dbb,stroke:#a3378a,color:white
    style Document fill:#4dbbbb,stroke:#368787,color:white
```

## 📝 整合文档

级别1任务使用单文件方法来最小化上下文切换：

```markdown
# 快速修复: [问题名称]

## 问题摘要
- 类型: [错误/热修复/快速增强]
- 优先级: [低/中/高/紧急]
- 报告者: [姓名/系统]
- 影响区域: [组件/功能]

## 分析
- 根本原因: [简要描述]
- 影响文件: [文件列表]
- 影响: [影响范围]

## 解决方案
- 方法: [简要描述]
- 所做更改: [更改列表]
- 执行命令: [关键命令]

## 验证
- 测试: [如何测试修复]
- 结果: [测试结果]
- 额外检查: [任何其他验证]

## 状态
- [x] 修复已实现
- [x] 测试通过
- [x] 文档已更新
```

## 🔄 Memory Bank更新

级别1任务使用简化的Memory Bank更新，开销最小：

```markdown
## tasks.md更新 (级别1)

### 任务: [任务名称]
- 状态: 完成
- 实现: [一行摘要]
- 修复链接: [文件/行引用]
```

## ⚡ 令牌优化模板

为了最大效率，级别1任务可以使用这个超紧凑模板：

```markdown
## 🔧 修复: [问题]
📌 问题: [简要描述]
🔍 原因: [根本原因]
🛠️ 解决方案: [实现的修复]
✅ 已测试: [验证方法]
```

## 🔄 自动文档助手

使用这些助手自动生成文档：

```javascript
function generateLevel1Documentation(issue, rootCause, solution, verification) {
  return `## 🔧 修复: ${issue}
📌 问题: ${issue}
🔍 原因: ${rootCause}
🛠️ 解决方案: ${solution}
✅ 已测试: ${verification}`;
}
```

## 📊 常见问题的快速模板

### 性能修复
```markdown
## 🔧 修复: [组件]中的性能问题
📌 问题: [组件]中响应时间慢
🔍 原因: 查询/算法效率低下
🛠️ 解决方案: 优化了[具体优化]
✅ 已测试: 响应时间从[X]毫秒改善到[Y]毫秒
```

### 错误修复
```markdown
## 🔧 修复: [组件]中的错误
📌 问题: [特定行为]无法正常工作
🔍 原因: [根本原因分析]
🛠️ 解决方案: 通过[实现细节]修复
✅ 已测试: 通过[测试方法]验证
```

### 快速增强
```markdown
## 🔧 增强: [功能]
📌 请求: 添加[特定功能]
🛠️ 实现: 通过[实现细节]添加
✅ 已测试: 通过[测试方法]验证
```

## ✅ 精简验证

级别1任务使用最小验证过程：

```markdown
验证:
[x] 修复已实现并测试
[x] 未引入回归
[x] 文档已更新
```

## 🚀 整合的Memory Bank更新

通过使用单一操作优化级别1任务的Memory Bank更新：

```javascript
// 优化级别1 Memory Bank更新的伪代码
function updateLevel1MemoryBank(taskInfo) {
  // 读取当前tasks.md
  const tasksContent = readFile("tasks.md");
  
  // 创建最小更新
  const updateBlock = `
### 任务: ${taskInfo.name}
- 状态: 完成
- 实现: ${taskInfo.solution}
- 修复链接: ${taskInfo.fileReference}
`;
  
  // 将更新添加到tasks.md
  const updatedContent = appendToSection(tasksContent, "已完成任务", updateBlock);
  
  // 单次操作写入
  writeFile("tasks.md", updatedContent);
  
  return "Memory Bank已更新";
}
```

## 🔄 优化级别1工作流程示例

```markdown
## 🔧 修复: 移动设备上登录按钮无法工作

📌 问题: 
用户无法在移动设备上登录，按钮显示但不触发身份验证

🔍 原因:
事件监听器使用桌面特定事件（mousedown而不是处理触摸事件）

🛠️ 解决方案:
更新事件处理以使用事件委托并支持鼠标和触摸事件：
```js
// 之前: 
loginButton.addEventListener('mousedown', handleLogin);

// 之后:
loginButton.addEventListener('mousedown', handleLogin);
loginButton.addEventListener('touchstart', handleLogin);
```

✅ 已测试:
- 在iOS Safari和Android Chrome上验证
- 登录现在在所有测试的移动设备上工作
- 桌面浏览器无回归
```

## ⚡ 令牌效率效益

这个优化的级别1工作流程提供：

1. 减少文档开销（70%减少）
2. 整合的Memory Bank更新（单次操作vs多次操作）
3. 专注的验证过程（仅基本检查）
4. 基于模板的常见场景方法
5. 更少步骤的精简工作流程

更新的方法在显著减少令牌使用的同时保持所有关键信息。