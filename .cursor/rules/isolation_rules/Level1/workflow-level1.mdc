---
description: Streamlined workflow for Level 1 Quick Bug Fix tasks
globs: "**/level1/**", "**/workflow/**"
alwaysApply: false
---
# 级别1任务的精简工作流程

> **简要说明：** 本文档概述了级别1（快速错误修复）任务的精简工作流程，专注于高效的问题解决，在保持充分文档的同时最小化开销。

## 🔍 级别1工作流程概述

```mermaid
graph LR
    Init["1. 初始化"] --> Impl["2. 实现"]
    Impl --> Doc["3. 文档"]
    
    %% 记录每个阶段的连接
    Init -.-> InitDocs["快速设置<br>理解问题"]
    Impl -.-> ImplDocs["专注修复<br>验证解决方案"]
    Doc -.-> DocDocs["记录解决方案<br>更新跟踪"]
```

## 📋 工作流程阶段

### 阶段1: 初始化

```mermaid
graph TD
    Start["开始级别1任务"] --> Identify["识别<br>问题"]
    Identify --> Understand["理解<br>问题"]
    Understand --> Setup["快速<br>环境设置"]
    Setup --> TaskEntry["创建快速<br>任务条目"]
    TaskEntry --> InitComplete["初始化<br>完成"]
```

**步骤:**
1. 识别要修复的具体问题
2. 理解问题及其影响
3. 为快速修复设置环境
4. 在tasks.md中创建最小任务条目

**里程碑检查点:**
```
✓ 初始化检查点
- 问题明确识别? [是/否]
- 问题已理解? [是/否]
- 环境已设置? [是/否]
- 任务条目已创建? [是/否]

→ 如果全部是: 进入实现阶段
→ 如果有否: 完成初始化步骤
```

### 阶段2: 实现

```mermaid
graph TD
    Start["开始<br>实现"] --> Locate["定位<br>问题源"]
    Locate --> Develop["开发<br>修复"]
    Develop --> Test["测试<br>解决方案"]
    Test --> Verify["验证<br>解决方案"]
    Verify --> ImplComplete["实现<br>完成"]
```

**步骤:**
1. 定位问题的源头
2. 开发有针对性的修复
3. 彻底测试解决方案
4. 验证问题已解决

**里程碑检查点:**
```
✓ 实现检查点
- 问题源已定位? [是/否]
- 修复已开发? [是/否]
- 解决方案已测试? [是/否]
- 解决方案已验证? [是/否]

→ 如果全部是: 进入文档阶段
→ 如果有否: 完成实现步骤
```

### 阶段3: 文档

```mermaid
graph TD
    Start["开始<br>文档"] --> Update["更新<br>tasks.md"]
    Update --> Solution["记录<br>解决方案"]
    Solution --> References["创建最小<br>交叉引用"]
    References --> NotifyStakeholders["通知<br>利益相关者"]
    NotifyStakeholders --> DocComplete["文档<br>完成"]
```

**步骤:**
1. 用修复详情更新tasks.md
2. 简洁地记录解决方案
3. 创建最小交叉引用
4. 根据需要通知利益相关者

**里程碑检查点:**
```
✓ 文档检查点
- tasks.md已更新? [是/否]
- 解决方案已记录? [是/否]
- 交叉引用已创建? [是/否]
- 利益相关者已通知? [是/否]

→ 如果全部是: 任务完成
→ 如果有否: 完成文档步骤
```

## 📋 TASKS.MD中的任务结构

对于级别1任务，使用这个最小结构：

```markdown
## 进行中的错误修复
- [ ] [级别1] 修复: [错误描述] (预计: XX分钟)

## 已完成的错误修复
- [X] [级别1] 已修复: [错误描述] (完成时间: YYYY-MM-DD)
  - 问题: [简要问题描述]
  - 解决方案: [简要解决方案描述]
  - 更改的文件: [文件路径]
```

## 📋 Memory Bank更新

对于级别1任务，进行最小的Memory Bank更新：

1. **tasks.md**: 用修复详情更新
2. **activeContext.md**: 如果相关，简要提及修复
3. **progress.md**: 添加到已完成修复列表

## 📋 工作流程验证检查清单

```
✓ 最终工作流程验证
- 问题已识别并理解? [是/否]
- 修复已实现并验证? [是/否]
- tasks.md已更新? [是/否]
- 解决方案已记录? [是/否]
- Memory Bank已最小更新? [是/否]

→ 如果全部是: 级别1任务成功完成
→ 如果有否: 处理未完成项目
```

## 📋 任务升级

如果在级别1过程中发现任务更复杂：

```
⚠️ 需要任务升级
当前级别: 级别1
建议级别: 级别[2/3/4]
原因: [简要解释]

您希望我将此任务升级到级别[2/3/4]吗？
```

升级指标：
1. 修复需要更改多个组件
2. 解决方案需要设计决策
3. 测试揭示更广泛的问题
4. 修复影响核心功能

## 🔄 与Memory Bank的集成

```mermaid
graph TD
    Workflow["级别1<br>工作流程"] --> TM["更新<br>tasks.md"]
    Workflow --> AC["最小更新<br>activeContext.md"]
    Workflow --> PM["简要更新<br>progress.md"]
    
    TM & AC & PM --> MB["Memory Bank<br>集成"]
    MB --> NextTask["转换到<br>下一个任务"]
```

## 🚨 效率原则

记住：

```
┌─────────────────────────────────────────────────────┐
│ 级别1工作流程优先考虑速度和效率。                     │
│ 在确保充分记录解决方案的同时最小化流程开销。           │
└─────────────────────────────────────────────────────┘
``` 