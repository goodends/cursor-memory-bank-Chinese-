---
description: Quick documentation approach for Level 1 Quick Bug Fix tasks
globs: quick-documentation.mdc
alwaysApply: false
---
# 级别1任务的快速文档

> **简要说明：** 本文档概述了级别1（快速错误修复）任务的快速文档方法，确保以最小开销捕获基本信息。

## 🔍 快速文档概述

```mermaid
graph TD
    FixComplete["错误修复<br>完成"] --> Document["记录<br>解决方案"]
    Document --> UpdateTasks["更新<br>tasks.md"]
    UpdateTasks --> MinimalUpdates["进行最小<br>Memory Bank更新"]
    MinimalUpdates --> CrossReference["创建简单<br>交叉引用"]
    CrossReference --> Complete["文档<br>完成"]
```

级别1任务需要高效的文档，在不产生不必要细节的情况下捕获基本信息。这种方法确保在保持速度和效率的同时保存关键知识。

## 📋 文档原则

1. **简洁性**: 保持文档简短但完整
2. **专注性**: 仅记录理解修复所必需的内容
3. **上下文**: 提供足够的上下文来理解问题
4. **解决方案**: 清楚描述更改了什么以及为什么
5. **可查找性**: 确保修复可以在以后轻松找到

## 📋 快速修复文档模板

```markdown
# 快速修复: [问题标题]

## 问题
[问题的简要描述 - 1-2句话]

## 根本原因
[导致问题的原因的简洁描述 - 1-2句话]

## 解决方案
[实现的修复的简要描述 - 2-3句话]

## 更改的文件
- [文件路径 1]
- [文件路径 2]

## 验证
[如何测试/验证修复 - 1-2句话]

## 说明
[任何可能有用的额外信息 - 可选]
```

## 📋 TASKS.MD更新

对于级别1任务，使用此格式更新tasks.md：

```markdown
## 已完成的错误修复
- [X] [级别1] 已修复: [问题标题] (完成时间: YYYY-MM-DD)
  - 问题: [一行描述]
  - 根本原因: [一行描述]
  - 解决方案: [一行描述]
  - 文件: [文件路径]
```

对于进行中的任务：

```markdown
## 进行中的错误修复
- [ ] [级别1] 修复: [问题标题] (预计: XX分钟)
  - 问题: [一行描述]
  - 位置: [组件/文件]
```

## 📋 Memory Bank更新

对于级别1任务，进行这些最小的Memory Bank更新：

1. **tasks.md**:
   - 如上所示更新修复详情
   - 将任务标记为完成

2. **activeContext.md** (仅在相关时):
   ```markdown
   ## 最近修复
   - [YYYY-MM-DD] 在[组件/文件]中修复了[问题]。[修复的一行描述]
   ```

3. **progress.md** (仅在重要时):
   ```markdown
   ## 错误修复
   - [YYYY-MM-DD] 在[组件/文件]中修复了[问题]。
   ```

除非修复揭示了重要的系统信息，否则其他Memory Bank文件通常不需要为级别1任务更新。

## 📋 常见错误类别

对错误进行分类以提高文档一致性：

1. **逻辑错误**:
   - 示例: "修复了用户验证中的错误条件逻辑"

2. **UI/显示问题**:
   - 示例: "修复了移动视图中按钮对齐错误"

3. **性能问题**:
   - 示例: "修复了用户配置文件数据加载缓慢"

4. **数据处理错误**:
   - 示例: "修复了日期格式解析错误"

5. **配置问题**:
   - 示例: "修复了环境变量设置错误"

## 📋 快速文档流程

按照这些步骤进行高效文档：

1. **修复后立即**:
   - 在修复在脑中还新鲜时记录
   - 专注于什么、为什么和如何
   - 对所做的更改要具体

2. **更新任务跟踪**:
   - 用修复详情更新tasks.md
   - 使用一致的格式便于参考

3. **最小交叉引用**:
   - 仅创建基本的交叉引用
   - 确保修复可以在将来找到

4. **检查完整性**:
   - 验证所有基本信息都已捕获
   - 确保其他开发者能理解修复

## 📋 示例: 好的vs不充分的文档

### ❌ 不充分的文档

```markdown
修复了登录错误。
```

### ✅ 好的文档

```markdown
# 快速修复: 带特殊字符的用户登录失败

## 问题
邮箱地址中带有特殊字符的用户（例如，+、%）无法登录。

## 根本原因
邮箱验证正则表达式错误地转义了特殊字符。

## 解决方案
更新了AuthValidator.js中的邮箱验证正则表达式，根据RFC 5322正确处理特殊字符。

## 更改的文件
- src/utils/AuthValidator.js

## 验证
测试了邮箱地址中各种特殊字符的登录（test+user@example.com, user%123@example.com）。
```

## 📋 文档验证检查清单

```
✓ 文档验证
- 问题描述清楚? [是/否]
- 根本原因已识别? [是/否]
- 解决方案已解释? [是/否]
- 更改的文件已列出? [是/否]
- 验证方法已描述? [是/否]
- tasks.md已更新? [是/否]
- Memory Bank已最小更新? [是/否]

→ 如果全部是: 文档完成
→ 如果有否: 完成缺失信息
```

## 📋 最小模式文档

对于最小模式，使用这个超紧凑格式：

```
✓ 修复: [问题标题]
✓ 原因: [一行根本原因]
✓ 解决方案: [一行修复描述]
✓ 文件: [文件路径]
✓ 已验证: [如何验证]
```

## 🔄 文档集成

快速文档与其他系统集成：

```mermaid
graph TD
    QuickDoc["快速修复<br>文档"] --> TasksMD["tasks.md<br>更新"]
    QuickDoc --> FixDetails["修复详情<br>文档"]
    
    TasksMD --> Tracking["任务<br>跟踪"]
    FixDetails --> Knowledge["知识<br>保存"]
    
    Tracking & Knowledge --> Future["未来<br>参考"]
```

## 🚨 文档效率原则

记住：

```
┌─────────────────────────────────────────────────────┐
│ 仅记录理解修复所需的内容。                           │
│ 专注于对将来遇到相同问题的人有帮助的                 │
│ 基本信息。                                         │
└─────────────────────────────────────────────────────┘
```

这确保级别1任务在不产生不必要开销的情况下高效记录，同时保存关键知识。
